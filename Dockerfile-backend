# Usar uma imagem base do PHP com FPM
FROM php:8.2-fpm

# Instalar dependências do sistema
RUN apt-get update
RUN apt-get install -y libpng-dev
RUN apt-get install -y libjpeg-dev
RUN apt-get install -y libfreetype6-dev
RUN apt-get install -y libxml2-dev
RUN apt-get install -y libzip-dev
RUN apt-get install -y libpq-dev
RUN apt-get install -y unzip
RUN apt-get install -y zip
RUN apt-get install -y git
RUN apt-get install -y curl
RUN apt-get install -y nginx
RUN apt update
RUN apt install -y postgresql-client
# RUN docker-php-ext-install gd
RUN docker-php-ext-install zip
RUN docker-php-ext-install pdo_pgsql
RUN docker-php-ext-install pgsql
RUN docker-php-ext-install xml
RUN docker-php-ext-install opcache
RUN docker-php-ext-enable pdo_pgsql
RUN docker-php-ext-enable pgsql
RUN docker-php-ext-enable opcache zip

# Instalar o Composer (gerenciador de dependências PHP)
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Definir o diretório de trabalho do Laravel
WORKDIR /var/www/html

# Copiar todos os arquivos do Laravel para dentro do container
COPY . .

# Ajustar permissões para diretórios necessários
RUN mkdir -p storage/framework/sessions storage/framework/cache/data storage/framework/views bootstrap/cache \
    && chmod -R 775 storage bootstrap/cache \
    && chown -R www-data:www-data storage bootstrap/cache

# Instalar dependências do Laravel
RUN composer install --no-interaction --prefer-dist --optimize-autoloader

# Gerar chave da aplicação
RUN php artisan key:generate

# Copiar arquivo de configuração do Nginx para o container
COPY .docker/nginx/laravel.conf /etc/nginx/sites-available/default

# Expor as portas 80 (Nginx) e 9000 (PHP-FPM)
EXPOSE 80
EXPOSE 9000

# Iniciar o PHP-FPM e o Nginx
CMD service nginx start && php-fpm
